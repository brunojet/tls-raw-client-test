#!/usr/bin/env python3
"""
Diagn√≥stico espec√≠fico para problemas de Firewall Corporativo
Testa diferentes varia√ß√µes de Client Hello para identificar bloqueios
"""

from .tls_raw_client import TLSRawClient, logger
import struct
import time
import json
from typing import Optional

class FirewallDiagnosticClient(TLSRawClient):
    """Cliente especializado para diagnosticar problemas de firewall"""
    
    def create_minimal_client_hello(self, server_name: Optional[str] = None) -> bytes:
        """
        Cria um Client Hello m√≠nimo reutilizando a estrutura do TLSRawClient
        """
        logger.info("Construindo Client Hello M√çNIMO...")
        
        # Usar cipher suites mais b√°sicos (sem TLS 1.3)
        original_ciphers = self.CIPHER_SUITES
        self.CIPHER_SUITES = [
            0xc02f,  # TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
            0xc030,  # TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
            0x009c,  # TLS_RSA_WITH_AES_128_GCM_SHA256
            0x009d,  # TLS_RSA_WITH_AES_256_GCM_SHA384
            0x002f,  # TLS_RSA_WITH_AES_128_CBC_SHA
            0x0035,  # TLS_RSA_WITH_AES_256_CBC_SHA
        ]
        
        # Sobrescrever o m√©todo de extensions temporariamente
        original_extensions = self._create_extensions
        self._create_extensions = self._create_minimal_extensions
        
        try:
            # Usar o m√©todo pai com configura√ß√µes m√≠nimas
            result = self.create_client_hello(server_name)
            logger.info(f"Client Hello M√çNIMO criado: {len(result)} bytes")
            return result
        finally:
            # Restaurar configura√ß√µes originais
            self.CIPHER_SUITES = original_ciphers
            self._create_extensions = original_extensions
    
    def _create_minimal_extensions(self, server_name: Optional[str] = None) -> bytes:
        """Extensions m√≠nimas para evitar bloqueio de firewall"""
        extensions = b''
        
        # Apenas SNI se necess√°rio
        if server_name:
            sni_data = struct.pack('!BH', 0, len(server_name)) + server_name.encode('utf-8')
            sni_list = struct.pack('!H', len(sni_data)) + sni_data
            sni_ext = struct.pack('!HH', 0x0000, len(sni_list)) + sni_list
            extensions += sni_ext
        
        # Supported Groups b√°sico (apenas curvas cl√°ssicas)
        basic_groups = [0x0017, 0x0018, 0x0019]  # secp256r1, secp384r1, secp521r1
        groups_data = b''.join(group.to_bytes(2, 'big') for group in basic_groups)
        groups_ext = struct.pack('!HHH', 0x000a, len(groups_data) + 2, len(groups_data))
        groups_ext += groups_data
        extensions += groups_ext
        
        # EC Point Formats b√°sico
        ec_formats = b'\x01\x00'  # uncompressed apenas
        ec_ext = struct.pack('!HH', 0x000b, len(ec_formats)) + ec_formats
        extensions += ec_ext
        
        # Signature Algorithms b√°sico (apenas RSA/ECDSA cl√°ssicos)
        basic_sig_algs = [
            0x0401,  # rsa_pkcs1_sha256
            0x0501,  # rsa_pkcs1_sha384
            0x0403,  # ecdsa_secp256r1_sha256
            0x0503,  # ecdsa_secp384r1_sha384
        ]
        sig_data = b''.join(alg.to_bytes(2, 'big') for alg in basic_sig_algs)
        sig_ext = struct.pack('!HHH', 0x000d, len(sig_data) + 2, len(sig_data))
        sig_ext += sig_data
        extensions += sig_ext
        
        return extensions
    
    def create_legacy_client_hello(self, server_name: Optional[str] = None) -> bytes:
        """
        Cria um Client Hello ainda mais legado (TLS 1.0 style) para firewalls antigos
        """
        logger.info("Construindo Client Hello LEGACY...")
        
        # Cipher suites muito b√°sicos
        original_ciphers = self.CIPHER_SUITES
        self.CIPHER_SUITES = [
            0x002f,  # TLS_RSA_WITH_AES_128_CBC_SHA
            0x0035,  # TLS_RSA_WITH_AES_256_CBC_SHA
            0x000a,  # TLS_RSA_WITH_3DES_EDE_CBC_SHA
        ]
        
        # Session ID com tamanho fixo (como clientes antigos)
        original_random = self.generate_random_bytes
        self.generate_random_bytes = lambda x: b'\x00' * x  # Random zeros para consist√™ncia
        
        # Sobrescrever extensions para m√≠nimo absoluto
        original_extensions = self._create_extensions
        self._create_extensions = lambda sn: b'' if not sn else struct.pack('!HH', 0x0000, len(sn) + 5) + struct.pack('!HBH', len(sn) + 3, 0, len(sn)) + sn.encode('utf-8')
        
        try:
            result = self.create_client_hello(server_name)
            logger.info(f"Client Hello LEGACY criado: {len(result)} bytes")
            return result
        finally:
            # Restaurar configura√ß√µes
            self.CIPHER_SUITES = original_ciphers
            self.generate_random_bytes = original_random
            self._create_extensions = original_extensions

def diagnose_corporate_firewall(host: str, port: int = 443):
    """
    Diagn√≥stico espec√≠fico para firewall corporativo
    """
    print("üî• DIAGN√ìSTICO DE FIREWALL CORPORATIVO")
    print("=" * 60)
    print(f"Testando: {host}:{port}")
    print("Cen√°rio: Firewall centralizado interceptando tr√°fego TLS")
    print()
    
    # Diferentes clientes para testar
    standard_client = TLSRawClient(host, port, timeout=15.0)
    firewall_client = FirewallDiagnosticClient(host, port, timeout=15.0)
    
    tests = [
        {
            "name": "1. Client Hello Padr√£o (OpenSSL-like)",
            "description": "Client Hello completo baseado no dump OpenSSL",
            "client": standard_client,
            "method": "create_client_hello",
            "sni": True
        },
        {
            "name": "2. Client Hello M√≠nimo",
            "description": "Client Hello simplificado (sem TLS 1.3, extensions b√°sicas)",
            "client": firewall_client,
            "method": "create_minimal_client_hello", 
            "sni": True
        },
        {
            "name": "3. Client Hello Legacy",
            "description": "Client Hello muito b√°sico (como browsers antigos)",
            "client": firewall_client,
            "method": "create_legacy_client_hello",
            "sni": True
        },
        {
            "name": "4. Sem SNI",
            "description": "Teste sem Server Name Indication",
            "client": firewall_client,
            "method": "create_minimal_client_hello",
            "sni": False
        },
        {
            "name": "5. M√∫ltiplas Tentativas",
            "description": "Detectar intermit√™ncias e padr√µes temporais",
            "client": standard_client,
            "method": "create_client_hello",
            "sni": True,
            "repeat": 5
        },
        {
            "name": "6. Conex√µes Consecutivas",
            "description": "Testar se firewall bloqueia ap√≥s m√∫ltiplas conex√µes",
            "client": firewall_client,
            "method": "create_minimal_client_hello",
            "sni": True,
            "repeat": 3,
            "no_delay": True
        }
    ]
    
    results = []
    
    for i, test in enumerate(tests, 1):
        print(f"üß™ TESTE {i}: {test['name']}")
        print(f"üìã {test['description']}")
        print("-" * 40)
        
        repeat_count = test.get('repeat', 1)
        test_results = []
        
        for attempt in range(repeat_count):
            if repeat_count > 1:
                print(f"  Tentativa {attempt + 1}/{repeat_count}:")
            
            try:
                # Criar Client Hello
                if test['sni']:
                    hello_data = getattr(test['client'], test['method'])(host)
                else:
                    hello_data = getattr(test['client'], test['method'])(None)
                
                # Testar conectividade
                result = test['client'].connect_and_test(use_sni=test['sni'])
                result['hello_size'] = len(hello_data)
                result['test_name'] = test['name']
                
                test_results.append(result)
                
                # Status resumido
                tcp_ok = "‚úÖ" if result['connection_success'] else "‚ùå"
                hello_ok = "‚úÖ" if result['client_hello_sent'] else "‚ùå" 
                resp_ok = "‚úÖ" if result['server_response'] else "‚ùå"
                
                status_line = f"  TCP: {tcp_ok} | Hello: {hello_ok} | Resp: {resp_ok}"
                
                if result['server_response']:
                    if 'handshake_type' in result['server_response']:
                        status_line += f" | {result['server_response']['handshake_type']}"
                    elif 'alert_description' in result['server_response']:
                        status_line += f" | Alert: {result['server_response']['alert_description']}"
                
                if result['error']:
                    status_line += f" | ‚ùå {result['error']}"
                
                print(status_line)
                
                # Timing para detectar timeouts vs. resets
                if 'connect_time' in result:
                    timing = f"  ‚è±Ô∏è  TCP: {result['connect_time']:.3f}s"
                    if result['error'] and 'timeout' in result['error'].lower():
                        timing += " | TLS: TIMEOUT"
                    elif result['error'] and 'reset' in result['error'].lower():
                        timing += " | TLS: RESET (firewall?)"
                    print(timing)
                
            except Exception as e:
                error_result = {
                    'test_name': test['name'],
                    'error': str(e),
                    'connection_success': False,
                    'client_hello_sent': False,
                    'server_response': None
                }
                test_results.append(error_result)
                print(f"  ‚ùå Exce√ß√£o: {e}")
            
            if repeat_count > 1 and attempt < repeat_count - 1:
                # Delay configurable entre tentativas
                delay = 0.5 if test.get('no_delay') else 2.0
                time.sleep(delay)
        
        results.extend(test_results)
        print("\n")
    
    # An√°lise dos resultados
    print("üìä AN√ÅLISE DE FIREWALL:")
    print("=" * 40)
    
    # An√°lise por tipo de teste
    tcp_success_by_test = {}
    hello_success_by_test = {}
    response_by_test = {}
    
    for result in results:
        test_name = result['test_name']
        
        if test_name not in tcp_success_by_test:
            tcp_success_by_test[test_name] = []
            hello_success_by_test[test_name] = []
            response_by_test[test_name] = []
        
        tcp_success_by_test[test_name].append(result['connection_success'])
        hello_success_by_test[test_name].append(result['client_hello_sent'])
        response_by_test[test_name].append(bool(result['server_response']))
    
    for test_name in tcp_success_by_test:
        tcp_rate = sum(tcp_success_by_test[test_name]) / len(tcp_success_by_test[test_name])
        hello_rate = sum(hello_success_by_test[test_name]) / len(hello_success_by_test[test_name])
        resp_rate = sum(response_by_test[test_name]) / len(response_by_test[test_name])
        
        print(f"{test_name}:")
        print(f"  TCP: {tcp_rate:.1%} | Hello: {hello_rate:.1%} | Resposta: {resp_rate:.1%}")
    
    print("\nüîç INDICADORES DE FIREWALL:")
    print("-" * 30)
    
    # An√°lise mais detalhada dos padr√µes
    all_tcp_success = all(r['connection_success'] for r in results)
    tcp_success_rate = sum(r['connection_success'] for r in results) / len(results)
    hello_sent_rate = sum(r['client_hello_sent'] for r in results if r['connection_success']) / max(1, sum(r['connection_success'] for r in results))
    response_rate = sum(bool(r['server_response']) for r in results) / len(results)
    
    reset_errors = [r for r in results if r.get('error') and 'reset' in r['error'].lower()]
    timeout_errors = [r for r in results if r.get('error') and 'timeout' in r['error'].lower()]
    
    # Padr√µes espec√≠ficos de firewall corporativo
    if tcp_success_rate > 0.8 and response_rate < 0.2:
        print("üî¥ FIREWALL CORPORATIVO DETECTADO:")
        print("  ‚Ä¢ TCP conecta consistentemente")
        print("  ‚Ä¢ Client Hello enviado com sucesso")
        print("  ‚Ä¢ Servidor nunca responde (silent drop)")
        print("  ‚Ä¢ DIAGN√ìSTICO: Firewall bloqueando TLS baseado em conte√∫do")
    
    if reset_errors:
        print("üî¥ FIREWALL COM INSPE√á√ÉO ATIVA:")
        print(f"  ‚Ä¢ {len(reset_errors)} conex√µes resetadas ativamente")
        print("  ‚Ä¢ Deep Packet Inspection (DPI) detectou padr√µes suspeitos")
        print("  ‚Ä¢ Poss√≠vel bloqueio de cipher suites ou extensions espec√≠ficas")
        
        # Verificar se reset acontece com tipos espec√≠ficos
        reset_by_type = {}
        for r in reset_errors:
            test_type = r['test_name']
            reset_by_type[test_type] = reset_by_type.get(test_type, 0) + 1
        
        if reset_by_type:
            print("  ‚Ä¢ Padr√£o de reset por tipo de teste:")
            for test_type, count in reset_by_type.items():
                print(f"    - {test_type}: {count} resets")
    
    if timeout_errors and len(timeout_errors) > len(reset_errors):
        print("üü° FIREWALL COM AN√ÅLISE LENTA:")
        print(f"  ‚Ä¢ {len(timeout_errors)} timeouts vs {len(reset_errors)} resets")
        print("  ‚Ä¢ DPI est√° analisando mas n√£o decidindo rapidamente")
        print("  ‚Ä¢ Pode estar consultando listas de bloqueio externas")
    
    # An√°lise de padr√µes temporais
    consecutive_tests = [r for r in results if 'Consecutivas' in r['test_name']]
    if consecutive_tests:
        consecutive_success = sum(bool(r['server_response']) for r in consecutive_tests)
        if consecutive_success < len(consecutive_tests) * 0.5:
            print("üü† RATE LIMITING DETECTADO:")
            print("  ‚Ä¢ Conex√µes consecutivas t√™m menor taxa de sucesso")
            print("  ‚Ä¢ Firewall pode ter rate limiting por IP/destino")
    
    # An√°lise de tipos de Client Hello
    minimal_results = [r for r in results if 'M√≠nimo' in r['test_name']]
    standard_results = [r for r in results if 'Padr√£o' in r['test_name']]
    legacy_results = [r for r in results if 'Legacy' in r['test_name']]
    
    minimal_success = sum(bool(r['server_response']) for r in minimal_results) if minimal_results else 0
    standard_success = sum(bool(r['server_response']) for r in standard_results) if standard_results else 0
    legacy_success = sum(bool(r['server_response']) for r in legacy_results) if legacy_results else 0
    
    if legacy_success > minimal_success > standard_success:
        print("üü¢ FIREWALL PREFERE TLS LEGACY:")
        print("  ‚Ä¢ Client Hello mais antigo tem melhor taxa de sucesso")
        print("  ‚Ä¢ Firewall pode estar bloqueando features TLS modernas")
        print("  ‚Ä¢ Recomenda√ß√£o: Use TLS 1.2 com cipher suites b√°sicos")
    
    elif minimal_success > standard_success:
        print("üü° FIREWALL SENS√çVEL A COMPLEXIDADE:")
        print("  ‚Ä¢ Client Hello simplificado funciona melhor")
        print("  ‚Ä¢ Extensions ou cipher suites espec√≠ficos podem estar sendo bloqueados")
        print("  ‚Ä¢ Recomenda√ß√£o: Minimize extensions TLS")
    
    # An√°lise de tamanho
    hello_sizes = [r.get('hello_size', 0) for r in results if r.get('hello_size')]
    if hello_sizes:
        min_size = min(hello_sizes)
        max_size = max(hello_sizes)
        print(f"\nüìè TAMANHOS DE CLIENT HELLO:")
        print(f"  ‚Ä¢ M√≠nimo: {min_size} bytes")
        print(f"  ‚Ä¢ M√°ximo: {max_size} bytes")
        if max_size - min_size > 200:
            print("  ‚Ä¢ Diferen√ßa significativa - pode afetar firewall")
    
    print("\nüí° RECOMENDA√á√ïES:")
    print("-" * 20)
    
    # Recomenda√ß√µes baseadas nos resultados
    any_response = any(r['server_response'] for r in results)
    minimal_works = any(r['server_response'] for r in results if 'M√≠nimo' in r['test_name'])
    standard_fails = not any(r['server_response'] for r in results if 'Padr√£o' in r['test_name'])
    
    if minimal_works and standard_fails:
        print("‚úÖ SOLU√á√ÉO ENCONTRADA:")
        print("  ‚Üí Use Client Hello simplificado")
        print("  ‚Üí Evite extensions TLS 1.3 modernas")
        print("  ‚Üí Configure bibliotecas para TLS 1.2 b√°sico")
        print("  ‚Üí Exemplo: requests com ssl_context customizado")
    
    elif legacy_success > 0 and not minimal_works:
        print("‚úÖ SOLU√á√ÉO LEGACY:")
        print("  ‚Üí Use configura√ß√µes TLS muito b√°sicas")
        print("  ‚Üí Cipher suites RSA cl√°ssicos apenas")
        print("  ‚Üí Evite ECDHE e algoritmos modernos")
    
    if not any_response:
        print("‚ùå BLOQUEIO TOTAL DETECTADO:")
        print("  ‚Üí Destino pode estar em blacklist corporativa")
        print("  ‚Üí Solicite libera√ß√£o formal ao time de seguran√ßa")
        print("  ‚Üí Forne√ßa justificativa de neg√≥cio para acesso")
        print("  ‚Üí Considere usar proxy corporativo se dispon√≠vel")
    
    if reset_errors and not timeout_errors:
        print("‚ö†Ô∏è  FIREWALL AGRESSIVO:")
        print("  ‚Üí Regras ativas bloqueando TLS espec√≠fico")
        print("  ‚Üí Teste com ferramentas padr√£o (curl, openssl)")
        print("  ‚Üí Compare com acesso de outras aplica√ß√µes")
        print("  ‚Üí Documente comportamento para time de rede")
    
    # Recomenda√ß√µes espec√≠ficas para Lambda
    print("\nüîß PARA AWS LAMBDA:")
    print("  ‚Ä¢ Aumente timeout para 30s+ (firewalls corporativos s√£o lentos)")
    print("  ‚Ä¢ Use retry com backoff exponencial")
    print("  ‚Ä¢ Considere VPC Endpoint se aplic√°vel")
    print("  ‚Ä¢ Monitore via CloudWatch para padr√µes temporais")
    
    if minimal_works:
        print("  ‚Ä¢ Implemente TLSRawClient com configura√ß√µes m√≠nimas")
        print("  ‚Ä¢ Use como fallback quando requests/urllib3 falhar")
    
    return results

def main():
    """Fun√ß√£o principal"""
    import sys
    
    if len(sys.argv) < 2:
        print("Uso:")
        print(f"  python {sys.argv[0]} <host> [porta]")
        print()
        print("Exemplos:")
        print(f"  python {sys.argv[0]} redestorehml.service-now.com")
        print(f"  python {sys.argv[0]} api.exemplo.com 8443")
        return
    
    host = sys.argv[1]
    port = int(sys.argv[2]) if len(sys.argv) > 2 else 443
    
    results = diagnose_corporate_firewall(host, port)
    
    # Salvar resultados para an√°lise posterior
    timestamp = int(time.time())
    filename = f"firewall_diagnostic_{host.replace('.', '_')}_{timestamp}.json"
    
    with open(filename, 'w') as f:
        json.dump(results, f, default=str, indent=2)
    
    print(f"\nüíæ Resultados salvos em: {filename}")
    print("üì§ Envie este arquivo para o time de rede/seguran√ßa")

if __name__ == "__main__":
    main()
