#!/usr/bin/env python3
"""
Exemplo completo de uso do TLS Raw Client
Demonstra diferentes cen√°rios de uso e configura√ß√µes
"""

import json
import logging
from tls_raw_client import TLSRawClient
from proxy_tls_client import ProxyTLSClient
from firewall_diagnostic import FirewallDiagnosticClient

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def example_basic_tls():
    """Exemplo 1: Cliente TLS b√°sico"""
    print("\nüîπ Exemplo 1: Cliente TLS B√°sico")
    print("=" * 40)
    
    # Teste b√°sico com Google
    client = TLSRawClient("www.google.com", 443, timeout=10)
    result = client.connect_and_test()
    
    print(f"Host: {result['host']}:{result['port']}")
    print(f"Conex√£o TCP: {'‚úÖ' if result['connection_success'] else '‚ùå'}")
    print(f"Client Hello enviado: {'‚úÖ' if result['client_hello_sent'] else '‚ùå'}")
    
    if result.get('response_analysis'):
        analysis = result['response_analysis']
        print(f"Tipo de resposta: {analysis['type']}")
        print(f"Fonte: {analysis['likely_source']}")
    
    if result.get('error'):
        print(f"Erro: {result['error']}")

def example_proxy_basic():
    """Exemplo 2: Proxy sem autentica√ß√£o"""
    print("\nüîπ Exemplo 2: Proxy B√°sico (sem autentica√ß√£o)")
    print("=" * 50)
    
    # Configura√ß√£o de proxy b√°sico
    try:
        client = ProxyTLSClient(
            host="www.github.com",
            port=443,
            proxy_host="proxy.empresa.com",  # Substitua pelo seu proxy
            proxy_port=8080,
            timeout=15
        )
        
        print("‚ö†Ô∏è Usando configura√ß√£o de exemplo - ajuste para seu ambiente")
        print("Configura√ß√£o:")
        print(f"  Target: {client.host}:{client.port}")
        print(f"  Proxy: {client.proxy_host}:{client.proxy_port}")
        print(f"  Auth: N√£o")
        
        # Teste apenas conectividade (sem enviar dados reais)
        print("\nüìù Para teste real, ajuste as configura√ß√µes de proxy")
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")

def example_proxy_with_auth():
    """Exemplo 3: Proxy com autentica√ß√£o"""
    print("\nüîπ Exemplo 3: Proxy com Autentica√ß√£o")
    print("=" * 42)
    
    # Configura√ß√£o de proxy com autentica√ß√£o
    config = {
        "target_host": "api.github.com",
        "target_port": 443,
        "proxy_host": "proxy.corp.com",
        "proxy_port": 3128,
        "proxy_username": "DOMAIN\\usuario",
        "proxy_password": "senha_aqui",
        "timeout": 30
    }
    
    print("Configura√ß√£o de exemplo:")
    print(json.dumps({**config, "proxy_password": "***"}, indent=2))
    print("\nüìù Substitua pelos valores reais do seu ambiente")

def example_config_file():
    """Exemplo 4: Carregamento via arquivo de configura√ß√£o"""
    print("\nüîπ Exemplo 4: Configura√ß√£o via Arquivo")
    print("=" * 43)
    
    try:
        # Tentar carregar configura√ß√£o de exemplo
        client = ProxyTLSClient.from_config_file("configs/proxy_basic.json")
        
        print("‚úÖ Configura√ß√£o carregada de: configs/proxy_basic.json")
        print(f"Target: {client.host}:{client.port}")
        print(f"Proxy: {client.proxy_host}:{client.proxy_port}")
        print(f"Auth: {'Sim' if client.proxy_username else 'N√£o'}")
        
        # Mostrar configura√ß√µes dispon√≠veis
        configs = client.list_available_configs()
        if configs:
            print(f"\nüìÅ Configura√ß√µes dispon√≠veis:")
            for filename, path in configs.items():
                print(f"  ‚Ä¢ {filename}")
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√£o: {e}")
        print("üí° Crie arquivos de configura√ß√£o em configs/ ou use proxy_setup_utility.py")

def example_firewall_diagnostic():
    """Exemplo 5: Diagn√≥stico de firewall"""
    print("\nüîπ Exemplo 5: Diagn√≥stico de Firewall")
    print("=" * 44)
    
    # Diagn√≥stico espec√≠fico de firewall
    client = FirewallDiagnosticClient("blocked-site.example.com", 443)
    
    print("üõ°Ô∏è Cliente de diagn√≥stico de firewall criado")
    print(f"Target: {client.host}:{client.port}")
    print("\nüìù Este cliente √© otimizado para detectar bloqueios de firewall")
    print("   Inclui testes espec√≠ficos para ambientes corporativos")

def example_response_analysis():
    """Exemplo 6: An√°lise de diferentes tipos de resposta"""
    print("\nüîπ Exemplo 6: An√°lise de Tipos de Resposta")
    print("=" * 47)
    
    client = TLSRawClient("example.com", 443)
    
    # Simular diferentes tipos de resposta
    test_responses = [
        {
            "name": "TLS Server Hello",
            "data": bytes.fromhex("160303003502000031030364ce8c09e0"),
            "expected": "TLS Record"
        },
        {
            "name": "HTTP Firewall Block",
            "data": b"HTTP/1.1 403 Forbidden\r\nServer: FortiGate\r\n\r\n",
            "expected": "HTTP Response"
        },
        {
            "name": "Proxy Auth Required",
            "data": b"HTTP/1.1 407 Proxy Authentication Required\r\n\r\n",
            "expected": "Proxy Authentication Required"
        }
    ]
    
    for test in test_responses:
        print(f"\nüîç Analisando: {test['name']}")
        analysis = client.analyze_response(test['data'])
        print(f"   Tipo detectado: {analysis['type']}")
        print(f"   Fonte: {analysis['likely_source']}")
        print(f"   √â TLS: {analysis['likely_tls']}")
        
        # Extrair informa√ß√µes de firewall se n√£o for TLS
        if not analysis['likely_tls']:
            firewall_info = client.extract_firewall_info(test['data'])
            if firewall_info:
                print(f"   Firewall info: {firewall_info}")

def example_lambda_config():
    """Exemplo 7: Configura√ß√£o para AWS Lambda"""
    print("\nüîπ Exemplo 7: Configura√ß√£o AWS Lambda")
    print("=" * 42)
    
    # Exemplo de event para Lambda
    lambda_event = {
        "test_type": "full",
        "proxy_config": {
            "target_host": "api.externa.com",
            "target_port": 443,
            "proxy_host": "proxy.empresa.com",
            "proxy_port": 8080,
            "proxy_username": "lambda_service",
            "proxy_password": "service_password",
            "timeout": 45
        }
    }
    
    print("üì¶ Exemplo de event para AWS Lambda:")
    print(json.dumps({
        **lambda_event,
        "proxy_config": {
            **lambda_event["proxy_config"],
            "proxy_password": "***"
        }
    }, indent=2))
    
    print("\nüîß Vari√°veis de ambiente suportadas:")
    env_vars = [
        "TARGET_HOST", "TARGET_PORT", "PROXY_HOST", "PROXY_PORT",
        "PROXY_USERNAME", "PROXY_PASSWORD", "PROXY_TIMEOUT"
    ]
    for var in env_vars:
        print(f"   ‚Ä¢ {var}")

def show_troubleshooting_tips():
    """Dicas de troubleshooting"""
    print("\nüîπ Dicas de Troubleshooting")
    print("=" * 32)
    
    tips = [
        {
            "problema": "Connection refused",
            "solu√ß√£o": "Verificar host/porta, conectividade de rede"
        },
        {
            "problema": "Timeout na conex√£o",
            "solu√ß√£o": "Aumentar timeout, verificar firewall/proxy"
        },
        {
            "problema": "407 Proxy Authentication",
            "solu√ß√£o": "Verificar credenciais, formato domain\\user"
        },
        {
            "problema": "Resposta HTTP em vez de TLS",
            "solu√ß√£o": "Proxy com SSL inspection ativo"
        },
        {
            "problema": "Conex√£o fecha ap√≥s Client Hello",
            "solu√ß√£o": "Firewall bloqueando, cipher suites incompat√≠veis"
        }
    ]
    
    for tip in tips:
        print(f"\n‚ùå {tip['problema']}")
        print(f"   üí° {tip['solu√ß√£o']}")

def main():
    """Fun√ß√£o principal - executa todos os exemplos"""
    print("üöÄ TLS Raw Client - Exemplos de Uso Completos")
    print("=" * 50)
    print("Este script demonstra diferentes formas de usar o sistema")
    print("Ajuste as configura√ß√µes conforme seu ambiente\n")
    
    # Executar exemplos
    example_basic_tls()
    example_proxy_basic()
    example_proxy_with_auth()
    example_config_file()
    example_firewall_diagnostic()
    example_response_analysis()
    example_lambda_config()
    show_troubleshooting_tips()
    
    print("\n" + "=" * 50)
    print("‚úÖ Exemplos conclu√≠dos!")
    print("\nüìö Pr√≥ximos passos:")
    print("1. Ajuste configura√ß√µes para seu ambiente")
    print("2. Use proxy_setup_utility.py para configura√ß√£o interativa")
    print("3. Teste com seus servidores/proxies reais")
    print("4. Veja docs/PROXY_README.md para documenta√ß√£o completa")
    print("\nüîß Utilit√°rios dispon√≠veis:")
    print("‚Ä¢ python proxy_setup_utility.py --interactive")
    print("‚Ä¢ python tests/test_response_analysis.py")
    print("‚Ä¢ python compare_openssl.py --host exemplo.com")

if __name__ == "__main__":
    main()
