#!/usr/bin/env python3
"""
Teste do Proxy TLS Client - Demonstra uso em ambiente corporativo
"""

import json
import logging
from proxy_tls_client import create_proxy_client_from_config

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def test_proxy_configurations():
    """Testa diferentes configura√ß√µes de proxy"""
    
    print("=== Teste de Configura√ß√µes de Proxy ===\n")
    
    # Configura√ß√µes de teste (adaptar conforme necess√°rio)
    test_configs = [
        {
            "name": "Proxy sem autentica√ß√£o",
            "config": {
                "target_host": "www.google.com",
                "target_port": 443,
                "proxy_host": "proxy.empresa.com",
                "proxy_port": 8080,
                "timeout": 10
            }
        },
        {
            "name": "Proxy com autentica√ß√£o",
            "config": {
                "target_host": "www.github.com", 
                "target_port": 443,
                "proxy_host": "proxy.empresa.com",
                "proxy_port": 8080,
                "proxy_username": "usuario_corporativo",
                "proxy_password": "senha_corporativa",
                "timeout": 15
            }
        },
        {
            "name": "Proxy alternativo (porta 3128)",
            "config": {
                "target_host": "api.github.com",
                "target_port": 443,
                "proxy_host": "proxy2.empresa.com",
                "proxy_port": 3128,
                "proxy_username": "usuario",
                "proxy_password": "senha",
                "timeout": 20
            }
        }
    ]
    
    for test in test_configs:
        print(f"\n--- {test['name']} ---")
        print(f"Configura√ß√£o: {json.dumps(test['config'], indent=2)}")
        
        try:
            # Criar cliente
            client = create_proxy_client_from_config(test['config'])
            
            # Testar conectividade b√°sica do proxy
            print("\n1. Testando conectividade com proxy...")
            proxy_test = client.test_proxy_connectivity()
            
            print(f"Conex√£o proxy: {'‚úì' if proxy_test['proxy_connection_success'] else '‚úó'}")
            if proxy_test.get('proxy_connect_time'):
                print(f"Tempo de conex√£o: {proxy_test['proxy_connect_time']:.3f}s")
            if proxy_test.get('error'):
                print(f"Erro: {proxy_test['error']}")
            
            # Se conectividade b√°sica funcionou, testar TLS
            if proxy_test['proxy_connection_success']:
                print("\n2. Testando TLS atrav√©s do proxy...")
                tls_result = client.connect_and_test()
                
                print(f"T√∫nel proxy: {'‚úì' if tls_result['connect_tunnel_success'] else '‚úó'}")
                print(f"Client Hello enviado: {'‚úì' if tls_result['client_hello_sent'] else '‚úó'}")
                print(f"Resposta recebida: {tls_result.get('response_size', 0)} bytes")
                
                if 'response_analysis' in tls_result:
                    analysis = tls_result['response_analysis']
                    print(f"Tipo de resposta: {analysis['type']}")
                    print(f"Fonte: {analysis['likely_source']}")
                
                if tls_result.get('error'):
                    print(f"Erro TLS: {tls_result['error']}")
            
        except Exception as e:
            print(f"Erro no teste: {e}")
        
        print("-" * 60)

def demonstrate_proxy_diagnosis():
    """Demonstra diagn√≥stico completo de proxy"""
    
    print("\n\n=== Diagn√≥stico Completo de Proxy ===\n")
    
    # Configura√ß√£o para diagn√≥stico (ajustar conforme necess√°rio)
    config = {
        "target_host": "www.microsoft.com",
        "target_port": 443,
        "proxy_host": "proxy.empresa.com",
        "proxy_port": 8080,
        "proxy_username": "usuario_teste",
        "proxy_password": "senha_teste",
        "timeout": 15
    }
    
    print("Configura√ß√£o para diagn√≥stico:")
    print(json.dumps(config, indent=2))
    print()
    
    try:
        # Criar cliente e executar diagn√≥stico
        client = create_proxy_client_from_config(config)
        diagnosis = client.diagnose_proxy_issues()
        
        print("Resultados do diagn√≥stico:")
        print(json.dumps(diagnosis, indent=2, default=str))
        
        # Mostrar recomenda√ß√µes de forma amig√°vel
        if diagnosis.get('recommendations'):
            print("\nüìã Recomenda√ß√µes:")
            for i, rec in enumerate(diagnosis['recommendations'], 1):
                print(f"  {i}. {rec}")
        
    except Exception as e:
        print(f"Erro durante diagn√≥stico: {e}")

def create_corporate_test_scenarios():
    """Cria cen√°rios de teste t√≠picos de ambientes corporativos"""
    
    print("\n\n=== Cen√°rios Corporativos T√≠picos ===\n")
    
    scenarios = [
        {
            "name": "üè¢ Proxy Corporativo Padr√£o",
            "description": "Proxy HTTP com autentica√ß√£o NTLM/Basic",
            "config": {
                "target_host": "api.github.com",
                "target_port": 443,
                "proxy_host": "proxy.company.local",
                "proxy_port": 8080,
                "proxy_username": "domain\\username",
                "proxy_password": "password"
            },
            "expected_issues": [
                "Proxy pode interceptar certificados TLS",
                "Firewall pode bloquear CONNECT para certas portas",
                "Autentica√ß√£o pode exigir dom√≠nio Windows"
            ]
        },
        {
            "name": "üîí Proxy com SSL Inspection",
            "description": "Proxy que inspeciona tr√°fego SSL/TLS",
            "config": {
                "target_host": "secure-api.service.com",
                "target_port": 443,
                "proxy_host": "ssl-proxy.company.com",
                "proxy_port": 3128,
                "proxy_username": "user@company.com",
                "proxy_password": "complex_password"
            },
            "expected_issues": [
                "Certificado ser√° substitu√≠do pelo do proxy",
                "Pode quebrar certificate pinning",
                "Lat√™ncia adicional devido √† inspe√ß√£o"
            ]
        },
        {
            "name": "üåê Proxy de Sa√≠da Restritivo", 
            "description": "Proxy que bloqueia muitas conex√µes",
            "config": {
                "target_host": "external-api.vendor.com",
                "target_port": 443,
                "proxy_host": "restrictive-proxy.corp.com",
                "proxy_port": 8080,
                "proxy_username": "service_account",
                "proxy_password": "service_password"
            },
            "expected_issues": [
                "Lista de sites permitidos restrita",
                "Bloqueio baseado em categorias",
                "Timeouts curtos para conex√µes externas"
            ]
        }
    ]
    
    for scenario in scenarios:
        print(f"\n{scenario['name']}")
        print(f"Descri√ß√£o: {scenario['description']}")
        print(f"Configura√ß√£o sugerida:")
        print(json.dumps(scenario['config'], indent=2))
        print(f"Problemas esperados:")
        for issue in scenario['expected_issues']:
            print(f"  ‚Ä¢ {issue}")
        print("-" * 50)

def show_usage_examples():
    """Mostra exemplos de uso pr√°tico"""
    
    print("\n\n=== Exemplos de Uso Pr√°tico ===\n")
    
    print("1. üìù Uso b√°sico com proxy sem autentica√ß√£o:")
    print("""
from proxy_tls_client import ProxyTLSClient

client = ProxyTLSClient(
    host="api.externa.com",
    port=443,
    proxy_host="proxy.empresa.com", 
    proxy_port=8080
)

result = client.connect_and_test()
print(f"Sucesso: {result['connection_success']}")
""")
    
    print("2. üîê Uso com autentica√ß√£o:")
    print("""
client = ProxyTLSClient(
    host="secure-api.com",
    port=443,
    proxy_host="proxy.corp.com",
    proxy_port=3128,
    proxy_username="usuario@empresa.com",
    proxy_password="senha_corporativa"
)

# Diagn√≥stico completo
diagnosis = client.diagnose_proxy_issues()
""")
    
    print("3. ‚öôÔ∏è Uso com configura√ß√£o externa:")
    print("""
config = {
    "target_host": "api.service.com",
    "target_port": 443,
    "proxy_host": "proxy.empresa.com",
    "proxy_port": 8080,
    "proxy_username": "user",
    "proxy_password": "pass",
    "timeout": 30
}

client = create_proxy_client_from_config(config)
result = client.connect_and_test()
""")
    
    print("4. üîç An√°lise de problemas:")
    print("""
# Para debugar problemas espec√≠ficos
result = client.connect_and_test()

if not result['connect_tunnel_success']:
    print("Problema: T√∫nel proxy n√£o estabelecido")
    print("Verificar: credenciais, conectividade, m√©todo CONNECT")

if result['response_analysis']['type'] == 'HTTP':
    print("Problema: Proxy retornou HTTP em vez de TLS")
    print("Verificar: SSL inspection, pol√≠ticas de proxy")
""")

if __name__ == "__main__":
    print("üöÄ Proxy TLS Client - Sistema de Teste e Diagn√≥stico")
    print("=" * 60)
    
    # Mostrar exemplos de uso
    show_usage_examples()
    
    # Mostrar cen√°rios corporativos
    create_corporate_test_scenarios()
    
    # Executar testes (comentado para evitar conex√µes reais)
    print("\n\n‚ö†Ô∏è  Para executar testes reais, descomente as linhas abaixo")
    print("e ajuste as configura√ß√µes de proxy conforme seu ambiente:")
    print()
    print("# test_proxy_configurations()")
    print("# demonstrate_proxy_diagnosis()")
    
    print("\n\n‚úÖ Sistema proxy configurado com sucesso!")
    print("\nCapacidades implementadas:")
    print("‚úì Suporte a proxy HTTP CONNECT")
    print("‚úì Autentica√ß√£o Basic (usu√°rio/senha)")
    print("‚úì Diagn√≥stico autom√°tico de problemas")
    print("‚úì An√°lise de respostas n√£o-TLS")
    print("‚úì Heran√ßa do TLS Raw Client completo")
    print("‚úì Logging detalhado para debug")
    print("‚úì Configura√ß√£o flex√≠vel via dicion√°rio")
    print("‚úì Tratamento de erros corporativos")
    
    print("\nüìö Arquivos criados:")
    print("  ‚Ä¢ proxy_tls_client.py - Cliente principal com proxy")
    print("  ‚Ä¢ Este script de teste e exemplos")
    
    print("\nüéØ Pr√≥ximos passos:")
    print("  1. Ajustar configura√ß√µes de proxy para seu ambiente")
    print("  2. Testar conectividade b√°sica")
    print("  3. Executar diagn√≥stico completo")
    print("  4. Analisar logs para identificar problemas")
